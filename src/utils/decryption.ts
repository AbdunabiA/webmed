const chars = [
	" ",
	"!",
	'"',
	"#",
	"$",
	"%",
	"&",
	"'",
	"(",
	")",
	"*",
	"+",
	",",
	"-",
	".",
	"/",
	":",
	";",
	"<",
	"=",
	">",
	"?",
	"@",
	"[",
	"\\",
	"]",
	"^",
	"_",
	"`",
	"{",
	"|",
	"}",
	"~",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l",
	"m",
	"n",
	"o",
	"p",
	"q",
	"r",
	"s",
	"t",
	"u",
	"v",
	"w",
	"x",
	"y",
	"z",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
];

const key = [
	"d",
	"~",
	"x",
	"4",
	":",
	"b",
	"t",
	"|",
	"?",
	"*",
	"6",
	"R",
	"^",
	"M",
	"D",
	"p",
	"/",
	"w",
	"K",
	"\\",
	"a",
	"j",
	"r",
	"g",
	"]",
	"B",
	";",
	"W",
	"J",
	"k",
	"S",
	"q",
	"e",
	"8",
	"U",
	"v",
	"(",
	"1",
	"G",
	"z",
	")",
	"P",
	"{",
	"0",
	"&",
	"2",
	"I",
	"m",
	"9",
	"'",
	"N",
	"Y",
	"C",
	"%",
	"F",
	"L",
	"<",
	"$",
	"H",
	"+",
	"}",
	"s",
	"[",
	"y",
	".",
	"u",
	",",
	'"',
	"h",
	"3",
	"7",
	"E",
	"i",
	"`",
	"Z",
	"#",
	" ",
	">",
	"o",
	"T",
	"l",
	"c",
	"A",
	"n",
	"X",
	"-",
	"Q",
	"=",
	"V",
	"O",
	"!",
	"5",
	"f",
	"_",
	"@",
];

function decodeBase64(encodedText: string | null) {
	if (encodedText) return atob(encodedText);
	return "";
}


export function decryptCallId(callId: string): {patient: {id:number, name:string} | number, doctor: {id:number, name:string} | number, type: 'doctor' | 'patient'} {
    let cipherText = decodeBase64(callId);
	let plainText = "";
	for (let i = 0; i < cipherText.length; i++) {
		const letter = cipherText[i];
		const index = key.indexOf(letter);
		plainText += chars[index];
	}
    let correctedPlainText = plainText.replace(/'/g, '"');
	return JSON.parse(correctedPlainText);
}